// Code generated by "enumer -json -trimprefix Color -transform snake -type Color -output models_string.go"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

const _ColorName = "bluegreendeep_redwarm_whitecool_white"

var _ColorIndex = [...]uint8{0, 4, 9, 17, 27, 37}

func (i Color) String() string {
	if i < 0 || i >= Color(len(_ColorIndex)-1) {
		return fmt.Sprintf("Color(%d)", i)
	}
	return _ColorName[_ColorIndex[i]:_ColorIndex[i+1]]
}

var _ColorValues = []Color{0, 1, 2, 3, 4}

var _ColorNameToValueMap = map[string]Color{
	_ColorName[0:4]:   0,
	_ColorName[4:9]:   1,
	_ColorName[9:17]:  2,
	_ColorName[17:27]: 3,
	_ColorName[27:37]: 4,
}

// ColorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ColorString(s string) (Color, error) {
	if val, ok := _ColorNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Color values", s)
}

// ColorValues returns all values of the enum
func ColorValues() []Color {
	return _ColorValues
}

// IsAColor returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Color) IsAColor() bool {
	for _, v := range _ColorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Color
func (i Color) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Color
func (i *Color) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Color should be a string, got %s", data)
	}

	var err error
	*i, err = ColorString(s)
	return err
}
